# =============================================================================
# Week 5: Loops & Conditional Statements - Complete Solutions
# =============================================================================

# =============================================================================
# DEMO CODE (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô)
# =============================================================================

# demo_for_basic.py
print("=== Demo 1: Basic For Loop ===")

# Loop ‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
print("‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å 1 ‡∏ñ‡∏∂‡∏á 5:")
for i in range(1, 6):
    print(f"‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {i}")

print("\n‡∏ô‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô:")
for i in range(0, 11, 2):  # 0, 2, 4, 6, 8, 10
    print(f"‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà: {i}")

print("\nLoop ‡∏ú‡πà‡∏≤‡∏ô string:")
name = "Python"
for letter in name:
    print(f"‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: {letter}")

print("\nLoop ‡∏ú‡πà‡∏≤‡∏ô list:")
fruits = ["apple", "banana", "orange"]
for fruit in fruits:
    print(f"‡∏ú‡∏•‡πÑ‡∏°‡πâ: {fruit}")

print("=" * 50)

# =============================================================================

# demo_while_basic.py
print("=== Demo 2: Basic While Loop ===")

# ‡∏ô‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ while
print("‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å 1 ‡∏ñ‡∏∂‡∏á 5 ‡∏î‡πâ‡∏ß‡∏¢ while:")
count = 1
while count <= 5:
    print(f"‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {count}")
    count += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ count

print("\nDemo while ‡∏Å‡∏±‡∏ö input (‡∏à‡∏≥‡∏•‡∏≠‡∏á):")
# ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á input ‡∏à‡∏£‡∏¥‡∏á
responses = ["hello", "world", "quit"]
for simulated_input in responses:
    print(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå: {simulated_input}")
    if simulated_input != "quit":
        print(f"‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå: {simulated_input}")
    else:
        print("‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß!")
        break

print("=" * 50)

# =============================================================================

# demo_loops_conditions.py
print("=== Demo 3: Loops + Conditions ===")

# ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏µ‡πà
print("‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà-‡∏Ñ‡∏µ‡πà:")
for num in range(1, 11):
    if num % 2 == 0:
        print(f"{num} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà")
    else:
        print(f"{num} ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà")

print("\nDemo ‡πÄ‡∏Å‡∏°‡∏ó‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏à‡∏≥‡∏•‡∏≠‡∏á):")
import random
secret_number = 7  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠ demo
guesses = [5, 8, 7]  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏¢
attempts = 0
max_attempts = 3

print(f"‡πÄ‡∏•‡∏Ç‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏≠: {secret_number}")
for guess in guesses:
    attempts += 1
    print(f"‡∏ó‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempts}: {guess}")
    
    if guess == secret_number:
        print("üéâ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
        break
    elif guess < secret_number:
        print("‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ")
    else:
        print("‡∏°‡∏≤‡∏Å‡πÑ‡∏õ")
    
    if attempts == max_attempts:
        print(f"‡∏´‡∏°‡∏î‡πÇ‡∏≠‡∏Å‡∏≤‡∏™! ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠ {secret_number}")

print("=" * 50)

# =============================================================================
# GUIDED PRACTICE SOLUTIONS
# =============================================================================

# solution_patterns.py
print("=== Pattern Generator - Solution ===")

# Pattern 1: Square numbers
print("1. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á:")
for i in range(1, 6):
    square = i ** 2
    print(f"{i}¬≤ = {square}")

print("\n2. ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á:")
for i in range(10, -1, -1):  # 10 down to 0
    print(i, end=" ")
print()  # New line

print("\n3. ‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì‡πÅ‡∏°‡πà 7:")
for i in range(1, 13):
    result = 7 * i
    print(f"7 √ó {i} = {result}")

print("=" * 50)

# =============================================================================

# solution_validation.py
print("=== Input Validation - Solution ===")

# ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ input() ‡∏à‡∏£‡∏¥‡∏á
print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ (1-100):")
test_ages = [-5, 0, 25, 150, 30]  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
for age in test_ages:
    print(f"‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏: {age}")
    if 1 <= age <= 100:
        print("‚úÖ ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        break
    else:
        print("‚ùå ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1-100")

print("\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏£‡∏î (A, B, C, D, F):")
test_grades = ["X", "G", "A"]  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
valid_grades = ["A", "B", "C", "D", "F"]
for grade in test_grades:
    print(f"‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏£‡∏î: {grade}")
    if grade.upper() in valid_grades:
        print("‚úÖ ‡πÄ‡∏Å‡∏£‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        break
    else:
        print("‚ùå ‡πÄ‡∏Å‡∏£‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô A, B, C, D, ‡∏´‡∏£‡∏∑‡∏≠ F")

print("\n3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å:")
test_numbers = [-5, 0, 10]  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
for num in test_numbers:
    print(f"‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: {num}")
    if num > 0:
        print("‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        break
    else:
        print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å")

print("=" * 50)

# =============================================================================

# solution_menu.py
print("=== Simple Calculator Menu - Solution ===")

# ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π
menu_choices = ["1", "3", "5"]  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
numbers = [(10, 5), (8, 4), (0, 0)]  # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

choice_index = 0
for choice in menu_choices:
    print(f"\n--- ‡πÄ‡∏°‡∏ô‡∏π ---")
    print("1. ‡∏ö‡∏ß‡∏Å")
    print("2. ‡∏•‡∏ö")
    print("3. ‡∏Ñ‡∏π‡∏ì")
    print("4. ‡∏´‡∏≤‡∏£")
    print("5. ‡∏≠‡∏≠‡∏Å")
    
    print(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {choice}")
    
    if choice == "1":
        a, b = numbers[choice_index]
        result = a + b
        print(f"{a} + {b} = {result}")
    elif choice == "2":
        a, b = numbers[choice_index]
        result = a - b
        print(f"{a} - {b} = {result}")
    elif choice == "3":
        a, b = numbers[choice_index]
        result = a * b
        print(f"{a} √ó {b} = {result}")
    elif choice == "4":
        a, b = numbers[choice_index]
        if b != 0:
            result = a / b
            print(f"{a} √∑ {b} = {result}")
        else:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå‡πÑ‡∏î‡πâ")
    elif choice == "5":
        print("‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô!")
        break
    else:
        print("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    
    choice_index += 1

print("=" * 50)

# =============================================================================
# MAIN PROJECT SOLUTIONS
# =============================================================================

# solution_grade_analyzer.py
print("=== Student Grade Analyzer - Solution ===")

# ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏£‡∏î
scores = [85, 92, 78, 67, 95, 73, 88, 54, 91, 82]
num_students = len(scores)

print(f"‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡∏≠‡∏á {num_students} ‡∏Ñ‡∏ô")
print(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {scores}")

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
total_score = 0
highest_score = scores[0]
lowest_score = scores[0]
passing_students = 0

for score in scores:
    total_score += score
    if score > highest_score:
        highest_score = score
    if score < lowest_score:
        lowest_score = score
    if score >= 60:
        passing_students += 1

average = total_score / num_students

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
print(f"\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö ===")
print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {num_students} ‡∏Ñ‡∏ô")
print(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {average:.2f}")
print(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {highest_score}")
print(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {lowest_score}")
print(f"‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö: {passing_students} ‡∏Ñ‡∏ô")
print(f"‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö: {num_students - passing_students} ‡∏Ñ‡∏ô")

# ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡πÄ‡∏Å‡∏£‡∏î
grade_counts = {"A": 0, "B": 0, "C": 0, "D": 0, "F": 0}

for score in scores:
    if score >= 80:
        grade_counts["A"] += 1
    elif score >= 70:
        grade_counts["B"] += 1
    elif score >= 60:
        grade_counts["C"] += 1
    elif score >= 50:
        grade_counts["D"] += 1
    else:
        grade_counts["F"] += 1

print(f"\n=== ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡πÄ‡∏Å‡∏£‡∏î ===")
for grade, count in grade_counts.items():
    percentage = (count / num_students) * 100
    print(f"‡πÄ‡∏Å‡∏£‡∏î {grade}: {count}")